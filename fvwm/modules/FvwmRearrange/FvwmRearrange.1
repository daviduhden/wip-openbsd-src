." $OpenBSD: FvwmRearrange.1,v 2.0 2025/10/18 10:00:00 random Exp $
." t
." @(#)FvwmRearrange.1  18/10/25
.de EX		"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.TH FvwmRearrange 1 "October 18, 2025" "FvwmRearrange 2.0" "FvwmRearrange 2.0"
.UC
.SH NAME
FvwmRearrange \- reorganise FVWM clients
.SH SYNOPSIS
FvwmRearrange is launched internally by fvwm; invoking it directly from a shell
is not supported.

.SH DESCRIPTION
FvwmRearrange arranges windows either in a tiled grid or in a cascading stack.
Tiling fills the current screen with non-overlapping frames.  Rows or columns
may be generated automatically so every client finds a slot.  When tiling is in
effect, windows are resized to match their assigned cell unless stretching has
been disabled, which can leave gaps between tiles.

In cascade mode the module positions successive windows so that the title of
each client remains visible beneath the one before it.  Windows can optionally
be constrained to a maximum width and height while still honouring the resize
increment rules.

.SH INVOCATION
FvwmRearrange is normally bound to menus, buttons, or key bindings.  The module
accepts a variety of switches that tailor how windows are selected and laid
out.  The following samples show typical usage:
.EX
FvwmRearrange -tile -h 10 10 90 90
.EE
.EX
FvwmRearrange -cascade -resize 10 2 80 70
.EE

The first command tiles across the screen horizontally, beginning 10 percent
from the left and top edges and finishing at the point 90 percent across and
down.  The second command cascades windows starting 10 percent across and
2 percent down, resizing each client to 80 by 70 percent of the screen when
possible.

For backward compatibility the module can also be invoked as FvwmTile or
FvwmCascade, which internally pass \-tile or \-cascade.

.SH OPTIONS
The options recognised by FvwmRearrange are described below.
.IP \-a
Process every window, including those marked with the WindowListSkip style.  As
part of this shortcut, untitled, transient, and maximised clients are also
selected.
.IP \-cascade
Choose cascade mode.  If neither \-cascade nor \-tile is supplied, cascade is
the default behaviour.
.IP \-desk
Operate on all windows on the current desk rather than limiting the action to
those that intersect the visible screen.
.IP \-flatx
When cascading, suppress the automatic horizontal offset that would normally be
added for each step.
.IP \-flaty
When cascading, suppress the automatic vertical offset that would normally be
added for each step.
.IP \-h
Tile across the screen first, and then downward.  Without this option the module
tiles vertically.
.IP "\-incx \fIvalue\fP"
Add \fIvalue\fP to the horizontal offset between cascaded windows.  The value
is taken as a percentage of the screen width unless suffixed with \fIp\fP, in
which case it is a pixel amount.
.IP "\-incy \fIvalue\fP"
Add \fIvalue\fP to the vertical offset between cascaded windows.  Percentages
are relative to the screen height; appending \fIp\fP forces interpretation as
pixels.
.IP \-m
Include maximised windows in the operation (this is implied by \-a).
.IP "\-mn \fIcount\fP"
Limit each tile row or column to \fIcount\fP windows before starting another
row or column.  Only meaningful when tiling.
.IP \-noraise
Do not alter the stacking order of affected clients.
.IP \-noresize
Preserve existing window sizes.  This is the implicit default when cascading.
.IP \-nostretch
While tiling, only shrink windows to fit their cells; never enlarge them.  While
cascading, do not expand windows beyond the specified maximum size when
\-resize is active.
.IP \-r
Reverse the sequence in which windows are processed.
.IP \-resize
Force clients to adopt the requested tiling or cascade dimensions.  This is the
default when tiling.
.IP \-s
Consider sticky windows along with normal clients (also implied by \-a).
.IP \-t
Include transient windows (implied by \-a).
.IP \-tile
Tile windows.  If supplied it must appear before other options.
.IP \-u
Include untitled windows (implied by \-a).

You may supply up to four additional numeric arguments.  The first two numbers
specify the initial X and Y offsets, in percentages of the screen size unless
they end with \fIp\fP to denote pixels.  The interpretation of the third and
fourth numbers varies with the chosen mode:
.RS
.TP
Tiling
The third and fourth parameters represent the lower-right corner of the tiling
bounding box.
.TP
Cascading
The third value caps the window width and the fourth value caps the height.  A
window that exceeds either limit is resized down to the limit.
.RE

Supplying zero for any numeric parameter leaves the corresponding default in
place.

.SH BUGS
Rearranging windows while clients are being destroyed can confuse the module.

.SH AUTHORS
Andrew Veliath (original FvwmTile and FvwmCascade modules)
Dominik Vogt (merged FvwmTile and FvwmCascade into FvwmRearrange)
David Uhden Collado (Complete rewrite and modernization)
