#!/bin/ksh

# Copyright (c) 2025 David Uhden Collado <david@uhden.dev>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# xephyr-proxy: Launch a program inside a temporary Xephyr server and teardown on exit.
# Usage: xephyr-proxy -- <command and args>
# Requires: Xephyr, xauth (optional), a working X server with GL
# disabled if needed.

set -eu

if [ "$#" -eq 0 ] || [ "$1" != "--" ]; then
  echo "Usage: xephyr-proxy -- <command> [args...]" >&2
  exit 2
fi
shift

# Find a free display number
find_display() {
  n=100
  while [ $n -lt 200 ]; do
    if ! xdpyinfo -display ":$n" >/dev/null 2>&1; then
      echo "$n"
      return 0
    fi
    n=$((n+1))
  done
  echo "No free display found" >&2
  exit 3
}

# Detect host display resolution (tries xrandr primary, then first active mode, then xdpyinfo)
get_host_resolution() {
  disp="$1"

  # Prefer xrandr if available
  if command -v xrandr >/dev/null 2>&1; then
    if out=$(xrandr --display "$disp" --current 2>/dev/null); then
      # Primary monitor WxH (format like "eDP-1 connected primary 1920x1080+0+0")
      res=$(print -r -- "$out" | awk '/ primary /{split($4,a,"+"); print a[1]; exit}')
      if [ -n "${res:-}" ]; then
        print -r -- "$res"
        return 0
      fi
      # First mode with asterisk (*) = current mode of the first connected output
      res=$(print -r -- "$out" | awk '/\*/{print $1; exit}')
      if [ -n "${res:-}" ]; then
        print -r -- "$res"
        return 0
      fi
    fi
  fi

  # Fallback to xdpyinfo (total root window size)
  if command -v xdpyinfo >/dev/null 2>&1; then
    res=$(xdpyinfo -display "$disp" 2>/dev/null | awk '/dimensions:/{print $2; exit}')
    if [ -n "${res:-}" ]; then
      print -r -- "$res"
      return 0
    fi
  fi

  # Last resort
  print -r -- "1024x768"
}

XEPHYR_DISPLAY=${XEPHYR_DISPLAY:-$(find_display)}
AUTHFILE=${XAUTHORITY:-}

# Read host display (where we probe the current resolution) BEFORE switching DISPLAY
HOST_DISPLAY=${HOST_DISPLAY:-${DISPLAY:-:0}}

# Allow override via env; otherwise auto-detect
XEPHYR_RESOLUTION=${XEPHYR_RESOLUTION:-$(get_host_resolution "$HOST_DISPLAY")}

# Start Xephyr in background with detected resolution
Xephyr ":$XEPHYR_DISPLAY" -screen "$XEPHYR_RESOLUTION" -nolisten tcp -reset -terminate -ac >/dev/null 2>&1 &
XEPHYR_PID=$!

# Wait briefly for server to be ready
for i in 1 2 3 4 5; do
  if xdpyinfo -display ":$XEPHYR_DISPLAY" >/dev/null 2>&1; then
    break
  fi
  sleep 0.2
done

cleanup() {
  kill "$XEPHYR_PID" >/dev/null 2>&1 || true
  wait "$XEPHYR_PID" >/dev/null 2>&1 || true
}
trap cleanup EXIT INT TERM HUP

export DISPLAY=":$XEPHYR_DISPLAY"
exec "$@"
